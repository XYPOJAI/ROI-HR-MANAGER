{"version":3,"sources":["src/users.service.js","src/components/SearchModal.jsx","src/components/AppBar.jsx","src/components/MyDrawer.jsx","src/screens/Create.jsx","src/screens/Details.jsx","src/screens/Edit.jsx","src/components/Icon/BadIcon.jsx","src/screens/Home.jsx","src/theme.jsx","src/screens/Settings.jsx","src/components/Profile.jsx","src/screens/Staff.jsx","src/Navigation/Navigator.jsx","App.js","src/components/Icon/ROI-BAD.png"],"names":["getProfilesAsync","fetch","then","response","json","catch","e","console","error","createProfileAsync","data","config","method","headers","body","JSON","stringify","SearchModal","showModal","setShowModal","navigation","useNavigation","useRoute","useState","input","setInput","profiles","setProfiles","useEffect","Center","Modal","isOpen","onClose","Content","maxWidth","CloseButton","Header","Body","Input","placeholder","width","borderRadius","py","px","fontSize","InputLeftElement","Icon","m","ml","size","color","as","MaterialIcons","name","onChangeText","Footer","Button","Group","space","variant","colorScheme","onPress","profile","find","p","firstName","toLowerCase","undefined","navigate","search","TitleIconButton","props","useTheme","colors","IconButton","icon","iconSize","_hover","bg","useColorModeValue","_pressed","AppBar","toggleColorMode","colorModeToggle","StatusBar","barStyle","Box","safeAreaTop","HStack","_dark","_light","justifyContent","alignItems","w","h","openDrawer","Text","getHeaderTitle","options","route","Ionicons","getIcon","screenName","DrawerContent","Pressable","rounded","event","MaterialCommunityIcons","fontWeight","index","MyDrawer","DrawerContentScrollView","VStack","divider","Divider","my","mx","bold","mt","validate","values","errors","lastName","phone","department","address","street","city","state","ZIP","country","FormInput","placeholderTextColor","borderColor","borderWidth","isRequired","CustomForm","FormControl","Label","htmlFor","id","label","ErrorMessage","Create","onSubmit","a","async","log","op","safeArea","initialValues","handleChange","handleBlur","handleSubmit","handleReset","maxW","Stack","Heading","isInvalid","value","InputGroup","type","params","goBack","Details","setProfile","readonly","Edit","u","updateProfileAsync","require","BadIcon","Image","resizeMode","source","uri","alt","Home","flex","minW","height","isDisabled","Appearance","getColorScheme","theme","extendTheme","ROI","Red","RealRed","Charcoal","Grey","White","BurntOrange","LightOrange","MidGrey","LightGrey","initialColorMode","String","strictMode","getColor","mode","Settings","ProfileButton","Profile","genConfig","React","setIsOpen","cancelRef","useRef","mr","style","Flex","wrap","justifySelf","direction","AlertDialog","leastDestructiveRef","ref","Staff","map","filter","textAlign","length","FlatList","keyExtractor","item","renderItem","createNativeStackNavigator","Drawer","createDrawerNavigator","Dimensions","get","ScreenNavigator","useColorMode","colorMode","Navigator","backBehavior","drawerContent","screenOptions","drawerStyle","backgroundColor","header","defaultStatus","Screen","component","App","NavigationContainer","NativeBaseProvider","module","exports"],"mappings":"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","file":"static/js/app.373f63be.chunk.js","sourcesContent":["export function getProfilesAsync() {\r\n  return fetch(\"https://enigmatic-ocean-67483.herokuapp.com/profiles\")\r\n    .then((response) => response.json())\r\n    .catch((e) => console.error(e));\r\n}\r\n\r\nexport function createProfileAsync(data) {\r\n  let config = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(data),\r\n  };\r\n\r\n  return fetch(\"https://enigmatic-ocean-67483.herokuapp.com/profiles\", config)\r\n    .then((response) => response.json())\r\n    .catch((e) => console.error(e));\r\n}\r\n\r\nexport function updateProfileAsync(data) {\r\n  let config = {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(data),\r\n  };\r\n\r\n  return fetch(\"https://enigmatic-ocean-67483.herokuapp.com/profiles\", config)\r\n    .then((response) => response.json())\r\n    .catch((e) => console.error(e));\r\n}\r\n\r\nexport function deleteProfileAsync(data) {\r\n  let config = {\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(data),\r\n  };\r\n\r\n  return fetch(\"https://enigmatic-ocean-67483.herokuapp.com/profiles\", config)\r\n    .then((response) => response.json())\r\n    .catch((e) => console.error(e));\r\n}\r\n\r\nexport function deleteProfilesAsyncById(id) {\r\n  return fetch(`https://enigmatic-ocean-67483.herokuapp.com/profiles/${id}`, {\r\n    method: \"DELETE\",\r\n  })\r\n    .then((response) => response.json())\r\n    .catch((e) => console.error(e));\r\n}\r\n","import { MaterialIcons } from \"@expo/vector-icons\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { Button, Center, Icon, Input, Modal } from \"native-base\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getProfilesAsync } from \"./../users.service\";\r\n\r\nexport default function SearchModal({ showModal, setShowModal }) {\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const [input, setInput] = useState();\r\n  const [profiles, setProfiles] = useState([]);\r\n  useEffect(() => {\r\n    getProfilesAsync().then((json) => setProfiles(json));\r\n  }, [showModal]);\r\n  function search() {\r\n    let profile = profiles.find(\r\n      (p) => p.firstName.toLowerCase() == input.toLowerCase()\r\n    );\r\n    if (profile == undefined) {\r\n      // error not found\r\n      setShowModal(false);\r\n      return;\r\n    }\r\n    setShowModal(false);\r\n    navigation.navigate(\"Details\", profile);\r\n  }\r\n  // State\r\n\r\n  return (\r\n    <Center>\r\n      <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\r\n        <Modal.Content maxWidth=\"400px\">\r\n          <Modal.CloseButton />\r\n          <Modal.Header>Find Employee</Modal.Header>\r\n          <Modal.Body>\r\n            <Input\r\n              placeholder=\"Enter name\"\r\n              width=\"100%\"\r\n              borderRadius=\"4\"\r\n              py=\"3\"\r\n              px=\"1\"\r\n              fontSize=\"14\"\r\n              InputLeftElement={\r\n                <Icon\r\n                  m=\"2\"\r\n                  ml=\"3\"\r\n                  size=\"6\"\r\n                  color=\"gray.400\"\r\n                  as={<MaterialIcons name=\"search\" />}\r\n                />\r\n              }\r\n              onChangeText={(input) => setInput(input)}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button.Group space={2}>\r\n              <Button\r\n                variant=\"ghost\"\r\n                colorScheme=\"blueGray\"\r\n                onPress={() => {\r\n                  setShowModal(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onPress={() => {\r\n                  search();\r\n                }}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Button.Group>\r\n          </Modal.Footer>\r\n        </Modal.Content>\r\n      </Modal>\r\n    </Center>\r\n  );\r\n}\r\n","import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\nimport { getHeaderTitle } from \"@react-navigation/elements\";\r\nimport {\r\n  Box,\r\n  HStack,\r\n  Icon,\r\n  IconButton,\r\n  StatusBar,\r\n  Text,\r\n  useColorModeValue,\r\n  useTheme,\r\n} from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport SearchModal from \"./SearchModal\";\r\nconst TitleIconButton = (props) => {\r\n  const { colors } = useTheme();\r\n  return (\r\n    <IconButton\r\n      icon={\r\n        <Icon\r\n          as={props.as || MaterialIcons}\r\n          name={props.name}\r\n          size={props.iconSize || \"lg\"}\r\n          color={props.color || \"white\"}\r\n        />\r\n      }\r\n      _hover={\r\n        props._hover || {\r\n          bg: useColorModeValue(\"ROI.BurntOrange\", \"ROI.Charcoal\"),\r\n        }\r\n      }\r\n      _pressed={\r\n        props._pressed || {\r\n          bg: useColorModeValue(\"ROI.BurntOrange\", \"ROI.Charcoal\"),\r\n        }\r\n      }\r\n      onPress={props.onPress}\r\n    />\r\n  );\r\n};\r\n\r\nexport default function AppBar(props) {\r\n  const toggleColorMode = props.colorModeToggle;\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const iconSize = [\"lg\"];\r\n  // navigation = props.navigation;\r\n  return (\r\n    <>\r\n      <StatusBar bg=\"#fff\" barStyle=\"light-content\" />\r\n      <Box safeAreaTop bg=\"#fff\" />\r\n      <HStack\r\n        // bg={props.headerStyle.backgroundColor}\r\n        _dark={{ bg: \"ROI.MidGrey\" }}\r\n        _light={{ bg: \"ROI.RealRed\" }}\r\n        // px=\"1\"\r\n        // py=\"3\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        w=\"100%\"\r\n        // h=\"100%\"\r\n        h={[\"50\", \"60\"]}\r\n        // maxW=\"350\"\r\n      >\r\n        <HStack alignItems=\"center\">\r\n          <TitleIconButton\r\n            name=\"menu\"\r\n            onPress={() => props.navigation.openDrawer()}\r\n          />\r\n          <Text color=\"white\" fontSize=\"20\">\r\n            {getHeaderTitle(props.options, props.route.name)}\r\n          </Text>\r\n        </HStack>\r\n        <HStack>\r\n          <TitleIconButton\r\n            as={Ionicons}\r\n            name={useColorModeValue(\"sunny\", \"sunny-outline\")}\r\n            // name={useColorModeValue(\"sunny-outline\", \"sunny\")}\r\n\r\n            // _dark={{ name: \"sunny-outline\" }}\r\n            // _light={{ name: \"sunny\" }}\r\n\r\n            //wb-sunny weather-sunny //md-sunny md-sunny-outline md-sunny-sharp\r\n            onPress={toggleColorMode}\r\n          />\r\n          <TitleIconButton name=\"search\" onPress={() => setShowModal(true)} />\r\n          <TitleIconButton\r\n            name=\"more-vert\"\r\n            // onPress={}\r\n          />\r\n        </HStack>\r\n      </HStack>\r\n      <SearchModal showModal={showModal} setShowModal={setShowModal} />\r\n    </>\r\n  );\r\n}\r\n","import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { DrawerContentScrollView } from \"@react-navigation/drawer\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  HStack,\r\n  Icon,\r\n  Pressable,\r\n  Text,\r\n  useColorModeValue,\r\n  VStack,\r\n} from \"native-base\";\r\nimport * as React from \"react\";\r\n\r\nconst getIcon = (screenName) => {\r\n  switch (screenName) {\r\n    case \"Home\":\r\n      return \"home\"; //home-outline\r\n    case \"Staff\":\r\n      return \"account-box-multiple\"; // account-box-multiple-outline\r\n    case \"Create\":\r\n      return \"account-plus\"; // account-plus-outline\r\n    case \"Settings\":\r\n      return \"cog\"; // cog-outline\r\n    default:\r\n      return undefined;\r\n\r\n    // account-edit\r\n    // account-details\r\n    // alert\r\n    //\r\n  }\r\n};\r\n\r\nfunction DrawerContent(props) {\r\n  return (\r\n    <Pressable\r\n      px=\"5\"\r\n      py=\"3\"\r\n      rounded=\"md\"\r\n      key={props.index}\r\n      // bg={\r\n      //   props.index === props.state.index\r\n      //     ? \"rgba(6, 182, 212, 0.1)\"\r\n      //     : \"transparent\"\r\n      // }\r\n      bg={useColorModeValue(\"ROI.White\", \"ROI.MidGrey\")}\r\n      onPress={(event) => {\r\n        props.navigation.navigate(props.name);\r\n      }}\r\n    >\r\n      <HStack space=\"7\" alignItems=\"center\">\r\n        <Icon\r\n          color={useColorModeValue(\"ROI.MidGrey\", \"ROI.White\")}\r\n          // color={props.index === props.state.index ? \"primary.500\" : \"gray.500\"}\r\n          size=\"5\"\r\n          as={<MaterialCommunityIcons name={getIcon(props.name)} />}\r\n        />\r\n        <Text\r\n          fontWeight=\"500\"\r\n          color={useColorModeValue(\"ROI.MidGrey\", \"ROI.White\")}\r\n          // color={props.index === props.state.index ? \"primary.500\" : \"gray.700\"}\r\n        >\r\n          {props.name}\r\n        </Text>\r\n      </HStack>\r\n    </Pressable>\r\n  );\r\n}\r\n\r\nexport default function MyDrawer(props) {\r\n  return (\r\n    // <Box bg={\"#3b3b3b\"} h=\"100%\">\r\n    <DrawerContentScrollView {...props}>\r\n      <VStack divider={<Divider />} space=\"4\" my=\"2\" mx=\"1\">\r\n        <Box px=\"4\">\r\n          <Text bold color={useColorModeValue(\"ROI.MidGrey\", \"ROI.White\")}>\r\n            HR Manager\r\n          </Text>\r\n          <Text\r\n            fontSize=\"14\"\r\n            mt=\"1\"\r\n            color={useColorModeValue(\"ROI.MidGrey\", \"ROI.White\")}\r\n            fontWeight=\"500\"\r\n          >\r\n            Staff Details Management\r\n          </Text>\r\n        </Box>\r\n        <VStack divider={<Divider />} space=\"4\" justifyContent=\"space-between\">\r\n          <VStack space=\"3\">\r\n            {/* {console.log(props.state.routeNames.map((name, index) => name))}\r\n            {props.state.routeNames.map((name, index) => {\r\n              // if (name == \"Settings\") return;\r\n              return (\r\n                <DrawerContent\r\n                  {...props}\r\n                  name={name}\r\n                  state={props.state}\r\n                  index={index}\r\n                />\r\n              );\r\n            })} */}\r\n            {<DrawerContent {...props} name={\"Home\"} index={1} />}\r\n            {<DrawerContent {...props} name={\"Staff\"} index={2} />}\r\n            {<DrawerContent {...props} name={\"Create\"} index={3} />}\r\n          </VStack>\r\n          <VStack>\r\n            {<DrawerContent {...props} name={\"Settings\"} index={4} />}\r\n          </VStack>\r\n        </VStack>\r\n      </VStack>\r\n    </DrawerContentScrollView>\r\n    // </Box>\r\n  );\r\n}\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport { Form, Formik } from \"formik\";\r\nimport {\r\n  Button,\r\n  Center,\r\n  FormControl,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  Stack,\r\n  useColorModeValue,\r\n  VStack,\r\n} from \"native-base\";\r\nimport { React } from \"react\";\r\nimport { createProfileAsync } from \"../users.service\";\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n  // !values.id && (errors.id = \"Required\");\r\n  !values.firstName && (errors.firstName = \"Required\");\r\n  !values.lastName && (errors.lastName = \"Required\");\r\n  !values.phone && (errors.phone = \"Required\");\r\n  !values.department && (errors.department = \"Required\");\r\n\r\n  !values.address.street && (errors.street = \"Required\");\r\n  !values.address.city && (errors.city = \"Required\");\r\n  !values.address.state && (errors.state = \"Required\");\r\n  !values.address.ZIP && (errors.ZIP = \"Required\");\r\n  !values.address.country && (errors.country = \"Required\");\r\n\r\n  return errors;\r\n};\r\n\r\nconst FormInput = (props) => {\r\n  return (\r\n    <Input\r\n      {...props}\r\n      placeholderTextColor={useColorModeValue(\r\n        \"rgba(0, 0, 0, 0.5)\",\r\n        \"rgba(255, 255, 255, 0.5)\"\r\n      )}\r\n      _light={{\r\n        color: \"ROI.MidGrey\",\r\n        bg: \"ROI.LightGrey\",\r\n        borderColor: \"rgba(0, 0, 0, 0.5)\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      _dark={{\r\n        color: \"ROI.White\",\r\n        bg: \"ROI.MidGrey\",\r\n        borderColor: \"ROI.Charcoal\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      isRequired\r\n    />\r\n  );\r\n};\r\n// Id Name Phone Department Address: Street City State ZIP Country\r\nconst CustomForm = (props) => {\r\n  return (\r\n    <FormControl w={props.w}>\r\n      <FormControl.Label htmlFor={props.id}>{props.label}</FormControl.Label>\r\n      <FormInput {...props} w=\"100%\" />\r\n      <FormControl.ErrorMessage>{props.error}</FormControl.ErrorMessage>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default function Create() {\r\n  const navigation = useNavigation();\r\n\r\n  const onSubmit = async (data) => {\r\n    // add user\r\n    console.log(JSON.stringify(data));\r\n    console.log(\"submitting with \", data);\r\n    await createProfileAsync(data);\r\n    return { op: \"create\", data: data };\r\n    // Add toasts\r\n    // if (!toast.isActive(id)) {\r\n    //   toast.show({\r\n    //     id,\r\n    //     title: \"Hey! You can't create a duplicate toast\"\r\n    //   });\r\n    // }\r\n    // navigation.navigate(\"Staff\", { data });\r\n  };\r\n\r\n  return (\r\n    <Center\r\n      bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n      // px={4}\r\n      // flex={1}\r\n      // minW={250}\r\n      w=\"100%\"\r\n      // h=\"100%\"\r\n      safeArea\r\n    >\r\n      <Formik\r\n        initialValues={{\r\n          id: \"\",\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          phone: \"\",\r\n          department: \"\",\r\n          address: {\r\n            street: \"\",\r\n            city: \"\",\r\n            state: \"\",\r\n            ZIP: \"\",\r\n            country: \"\",\r\n          },\r\n        }}\r\n        onSubmit={onSubmit}\r\n        validate={validate}\r\n      >\r\n        {({\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          values,\r\n          errors,\r\n          handleReset,\r\n        }) => (\r\n          <Form onSubmit={onSubmit}>\r\n            <VStack safeArea mx=\"3\" p=\"2\" py=\"8\" w=\"90%\" maxW=\"300px\">\r\n              <FormControl>\r\n                <VStack space={3} mt=\"5\">\r\n                  <Stack>\r\n                    <Heading\r\n                      size=\"lg\"\r\n                      fontWeight=\"600\"\r\n                      color=\"coolGray.800\"\r\n                      _dark={{\r\n                        color: \"warmGray.50\",\r\n                      }}\r\n                      // color={useColorModeValue(\"#D9D9D9\", \"#595959\")} // Add text colors\r\n                    >\r\n                      Create a new employee profile\r\n                    </Heading>\r\n                  </Stack>\r\n\r\n                  {/* Id Name Phone Department Address: Street City State ZIP Country */}\r\n                  <CustomForm\r\n                    label=\"ID\"\r\n                    id=\"id\"\r\n                    placeholder=\"Enter ID here\"\r\n                    isInvalid={\"id\" in errors}\r\n                    value={values.id}\r\n                    onChangeText={handleChange(\"id\")}\r\n                  />\r\n                  <InputGroup>\r\n                    <CustomForm\r\n                      label=\"First Name\"\r\n                      id=\"firstName\"\r\n                      placeholder=\"e.g. John\"\r\n                      isInvalid={\"firstName\" in errors}\r\n                      value={values.firstName}\r\n                      onChangeText={handleChange(\"firstName\")}\r\n                      w=\"45%\"\r\n                    />\r\n                    <CustomForm\r\n                      label=\"Last Name\"\r\n                      id=\"lastName\"\r\n                      placeholder=\"e.g. Doe\"\r\n                      isInvalid={\"lastName\" in errors}\r\n                      value={values.lastName}\r\n                      onChangeText={handleChange(\"lastName\")}\r\n                      w=\"55%\"\r\n                    />\r\n                  </InputGroup>\r\n                  <CustomForm\r\n                    label=\"Phone\"\r\n                    id=\"phone\"\r\n                    placeholder=\"e.g. 000-000-0000\"\r\n                    type=\"number\"\r\n                    isInvalid={\"phone\" in errors}\r\n                    value={values.phone}\r\n                    onChangeText={handleChange(\"phone\")}\r\n                  />\r\n                  <CustomForm\r\n                    label=\"Department\"\r\n                    id=\"department\"\r\n                    placeholder=\"e.g. department\"\r\n                    isInvalid={\"department\" in errors}\r\n                    value={values.department}\r\n                    onChangeText={handleChange(\"department\")}\r\n                  />\r\n                  <FormControl\r\n                  //Address: Street City State ZIP Country\r\n                  >\r\n                    <FormControl.Label htmlFor={\"address\"}>\r\n                      {\"Address\"}\r\n                    </FormControl.Label>\r\n                    <InputGroup>\r\n                      <FormInput\r\n                        id={\"street\"}\r\n                        name={\"Street\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"Street\"}\r\n                        w=\"60%\"\r\n                        isInvalid={\"street\" in errors}\r\n                        value={values.address.street}\r\n                        onChangeText={handleChange(\"address.street\")}\r\n                      />\r\n                      <FormInput\r\n                        id={\"city\"}\r\n                        name={\"City\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"City\"}\r\n                        w=\"40%\"\r\n                        isInvalid={\"city\" in errors}\r\n                        value={values.address.city}\r\n                        onChangeText={handleChange(\"address.city\")}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                      <FormInput\r\n                        id={\"state\"}\r\n                        name={\"State\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"State\"}\r\n                        w=\"40%\"\r\n                        isInvalid={\"state\" in errors}\r\n                        value={values.address.state}\r\n                        onChangeText={handleChange(\"address.state\")}\r\n                      />\r\n                      <FormInput\r\n                        id={\"ZIP\"}\r\n                        name={\"ZIP\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"ZIP\"}\r\n                        w=\"20%\"\r\n                        isInvalid={\"ZIP\" in errors}\r\n                        value={values.address.ZIP}\r\n                        onChangeText={handleChange(\"address.ZIP\")}\r\n                      />\r\n                      <FormInput\r\n                        id={\"country\"}\r\n                        name={\"Country\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"Country\"}\r\n                        w=\"40%\"\r\n                        isInvalid={\"country\" in errors}\r\n                        value={values.address.country}\r\n                        onChangeText={handleChange(\"address.country\")}\r\n                      />\r\n                    </InputGroup>\r\n                  </FormControl>\r\n                  {/* {\"name\" in errors ? (\r\n              <FormControl.ErrorMessage>Error</FormControl.ErrorMessage>\r\n            ) : (\r\n              <FormControl.HelperText>\r\n                Name should contain atleast 3 character.\r\n              </FormControl.HelperText>\r\n            )} */}\r\n\r\n                  <Button\r\n                    bg=\"ROI.LightOrange\"\r\n                    _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                    _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                    type=\"submit\"\r\n                    onPress={async () => {\r\n                      let params = await onSubmit(values);\r\n                      // await handleSubmit();\r\n                      // values = clearValues(values);\r\n                      handleReset();\r\n\r\n                      navigation.navigate(\"Staff\", params);\r\n                    }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n\r\n                  <Button\r\n                    bg=\"ROI.LightOrange\"\r\n                    _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                    _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                    type=\"submit\"\r\n                    onPress={() => {\r\n                      handleReset();\r\n                      navigation.goBack();\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </VStack>\r\n              </FormControl>\r\n            </VStack>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Center>\r\n  );\r\n}\r\n","import { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Button,\r\n  Center,\r\n  FormControl,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  Stack,\r\n  useColorModeValue,\r\n  VStack,\r\n} from \"native-base\";\r\nimport { React, useEffect, useState } from \"react\";\r\n\r\nconst FormInput = (props) => {\r\n  return (\r\n    <Input\r\n      {...props}\r\n      placeholderTextColor={useColorModeValue(\r\n        \"rgba(0, 0, 0, 0.5)\",\r\n        \"rgba(255, 255, 255, 0.5)\"\r\n      )}\r\n      _light={{\r\n        color: \"ROI.MidGrey\",\r\n        bg: \"ROI.LightGrey\",\r\n        borderColor: \"rgba(0, 0, 0, 0.5)\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      _dark={{\r\n        color: \"ROI.White\",\r\n        bg: \"ROI.MidGrey\",\r\n        borderColor: \"ROI.Charcoal\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      isRequired\r\n    />\r\n  );\r\n};\r\n// Id Name Phone Department Address: Street City State ZIP Country\r\nconst CustomForm = (props) => {\r\n  return (\r\n    <FormControl w={props.w}>\r\n      <FormControl.Label htmlFor={props.id}>{props.label}</FormControl.Label>\r\n      <FormInput {...props} w=\"100%\" />\r\n      <FormControl.ErrorMessage>{props.error}</FormControl.ErrorMessage>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default function Details() {\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const [profile, setProfile] = useState(route.params);\r\n  // console.log(route.params.profile);\r\n  // console.log(route.params);\r\n\r\n  useEffect(() => {\r\n    if (profile != route.params) {\r\n      setProfile(route.params);\r\n    }\r\n  }, [route.params]);\r\n\r\n  // Add toasts\r\n  // if (!toast.isActive(id)) {\r\n  //   toast.show({\r\n  //     id,\r\n  //     title: \"Hey! You can't create a duplicate toast\"\r\n  //   });\r\n  // }\r\n  // navigation.goBack();\r\n\r\n  return (\r\n    <Center\r\n      bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n      // px={4}\r\n      // flex={1}\r\n      // minW={250}\r\n      w=\"100%\"\r\n      safeArea\r\n    >\r\n      <Formik\r\n        initialValues={{\r\n          id: profile.id,\r\n          firstName: profile.firstName,\r\n          lastName: profile.lastName,\r\n          phone: profile.phone,\r\n          department: profile.department,\r\n          address: {\r\n            street: profile.address.street,\r\n            city: profile.address.city,\r\n            state: profile.address.state,\r\n            ZIP: profile.address.ZIP,\r\n            country: profile.address.country,\r\n          },\r\n        }}\r\n      >\r\n        {({ handleBlur, values, handleReset }) => (\r\n          <VStack safeArea mx=\"3\" p=\"2\" py=\"8\" w=\"90%\" maxW=\"300px\">\r\n            <FormControl>\r\n              <VStack space={3} mt=\"5\">\r\n                <Stack>\r\n                  <Heading\r\n                    size=\"lg\"\r\n                    fontWeight=\"600\"\r\n                    color=\"coolGray.800\"\r\n                    _dark={{\r\n                      color: \"warmGray.50\",\r\n                    }}\r\n                    // color={useColorModeValue(\"#D9D9D9\", \"#595959\")} // Add text colors\r\n                  >\r\n                    Employee details\r\n                  </Heading>\r\n                </Stack>\r\n\r\n                {/* Id Name Phone Department Address: Street City State ZIP Country */}\r\n                <CustomForm label=\"ID\" id=\"id\" value={profile.id} />\r\n                <InputGroup>\r\n                  <CustomForm\r\n                    label=\"First Name\"\r\n                    id=\"firstName\"\r\n                    value={profile.firstName}\r\n                    w=\"45%\"\r\n                  />\r\n                  <CustomForm\r\n                    label=\"Last Name\"\r\n                    id=\"lastName\"\r\n                    value={profile.lastName}\r\n                    w=\"55%\"\r\n                  />\r\n                </InputGroup>\r\n\r\n                <CustomForm\r\n                  label=\"Phone\"\r\n                  id=\"phone\"\r\n                  type=\"number\"\r\n                  value={profile.phone}\r\n                />\r\n                <CustomForm\r\n                  label=\"Department\"\r\n                  id=\"department\"\r\n                  value={profile.department}\r\n                />\r\n                <FormControl\r\n                //Address: Street City State ZIP Country\r\n                >\r\n                  <FormControl.Label htmlFor={\"address\"}>\r\n                    {\"Address\"}\r\n                  </FormControl.Label>\r\n                  <InputGroup readonly>\r\n                    <FormInput\r\n                      readonly\r\n                      id={\"street\"}\r\n                      name={\"Street\"}\r\n                      type={\"text\"}\r\n                      w=\"60%\"\r\n                      value={profile.address.street}\r\n                    />\r\n                    <FormInput\r\n                      readonly\r\n                      id={\"city\"}\r\n                      name={\"City\"}\r\n                      type={\"text\"}\r\n                      w=\"40%\"\r\n                      value={profile.address.city}\r\n                    />\r\n                  </InputGroup>\r\n                  <InputGroup readonly>\r\n                    <FormInput\r\n                      id={\"state\"}\r\n                      name={\"State\"}\r\n                      type={\"text\"}\r\n                      w=\"40%\"\r\n                      value={profile.address.state}\r\n                      readonly\r\n                    />\r\n                    <FormInput\r\n                      readonly\r\n                      id={\"ZIP\"}\r\n                      name={\"ZIP\"}\r\n                      type={\"text\"}\r\n                      w=\"20%\"\r\n                      value={profile.address.ZIP}\r\n                    />\r\n                    <FormInput\r\n                      readonly\r\n                      id={\"country\"}\r\n                      name={\"Country\"}\r\n                      type={\"text\"}\r\n                      w=\"40%\"\r\n                      value={profile.address.country}\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n                {/* {\"name\" in errors ? (\r\n              <FormControl.ErrorMessage>Error</FormControl.ErrorMessage>\r\n            ) : (\r\n              <FormControl.HelperText>\r\n                Name should contain atleast 3 character.\r\n              </FormControl.HelperText>\r\n            )} */}\r\n\r\n                <Button\r\n                  bg=\"ROI.LightOrange\"\r\n                  _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                  _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                  type=\"submit\"\r\n                  onPress={() => {\r\n                    navigation.navigate(\"Edit\", profile);\r\n                  }}\r\n                >\r\n                  Edit\r\n                </Button>\r\n\r\n                <Button\r\n                  bg=\"ROI.LightOrange\"\r\n                  _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                  _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                  type=\"submit\"\r\n                  onPress={() => {\r\n                    navigation.goBack();\r\n                  }}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </VStack>\r\n            </FormControl>\r\n          </VStack>\r\n        )}\r\n      </Formik>\r\n    </Center>\r\n  );\r\n}\r\n","import { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Button,\r\n  Center,\r\n  FormControl,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  Stack,\r\n  useColorModeValue,\r\n  VStack,\r\n} from \"native-base\";\r\nimport { React } from \"react\";\r\nimport { updateProfileAsync } from \"./../users.service.js\";\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n  !values.id && (errors.id = \"Required\");\r\n  !values.firstName && (errors.firstName = \"Required\");\r\n  !values.lastName && (errors.lastName = \"Required\");\r\n  !values.phone && (errors.phone = \"Required\");\r\n  !values.department && (errors.department = \"Required\");\r\n\r\n  !values.address.street && (errors.street = \"Required\");\r\n  !values.address.city && (errors.city = \"Required\");\r\n  !values.address.state && (errors.state = \"Required\");\r\n  !values.address.ZIP && (errors.ZIP = \"Required\");\r\n  !values.address.country && (errors.country = \"Required\");\r\n\r\n  return errors;\r\n};\r\nconst FormInput = (props) => {\r\n  return (\r\n    <Input\r\n      {...props}\r\n      placeholderTextColor={useColorModeValue(\r\n        \"rgba(0, 0, 0, 0.5)\",\r\n        \"rgba(255, 255, 255, 0.5)\"\r\n      )}\r\n      _light={{\r\n        color: \"ROI.MidGrey\",\r\n        bg: \"ROI.LightGrey\",\r\n        borderColor: \"rgba(0, 0, 0, 0.5)\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      _dark={{\r\n        color: \"ROI.White\",\r\n        bg: \"ROI.MidGrey\",\r\n        borderColor: \"ROI.Charcoal\",\r\n        borderWidth: \"0.4\",\r\n      }}\r\n      isRequired\r\n    />\r\n  );\r\n};\r\n// Id Name Phone Department Address: Street City State ZIP Country\r\nconst CustomForm = (props) => {\r\n  return (\r\n    <FormControl w={props.w}>\r\n      <FormControl.Label htmlFor={props.id}>{props.label}</FormControl.Label>\r\n      <FormInput {...props} w=\"100%\" />\r\n      <FormControl.ErrorMessage>{props.error}</FormControl.ErrorMessage>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default function Edit() {\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  let u = route.params;\r\n  const onSubmit = (data) => {\r\n    // add user\r\n    console.log(JSON.stringify(data));\r\n    console.log(\"submitting with \", data);\r\n    updateProfileAsync(data).then((json) => {\r\n      let params = { op: \"update\", data: data };\r\n      navigation.navigate(\"Staff\", params);\r\n    });\r\n    // Add toasts\r\n    // if (!toast.isActive(id)) {\r\n    //   toast.show({\r\n    //     id,\r\n    //     title: \"Hey! You can't create a duplicate toast\"\r\n    //   });\r\n    // }\r\n    // navigation.goBack();\r\n  };\r\n\r\n  return (\r\n    <Center\r\n      bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n      // px={4}\r\n      // flex={1}\r\n      // minW={250}\r\n      w=\"100%\"\r\n      safeArea\r\n    >\r\n      <Formik\r\n        initialValues={{\r\n          id: u.id,\r\n          firstName: u.firstName,\r\n          lastName: u.lastName,\r\n          phone: u.phone,\r\n          department: u.department,\r\n          address: {\r\n            street: u.address.street,\r\n            city: u.address.city,\r\n            state: u.address.state,\r\n            ZIP: u.address.ZIP,\r\n            country: u.address.country,\r\n          },\r\n        }}\r\n        onSubmit={onSubmit}\r\n        validate={validate}\r\n      >\r\n        {({ handleChange, handleBlur, handleSubmit, values, errors }) => (\r\n          <VStack safeArea mx=\"3\" p=\"2\" py=\"8\" w=\"90%\" maxW=\"300px\">\r\n            <FormControl>\r\n              <VStack space={3} mt=\"5\">\r\n                <Stack>\r\n                  <Heading\r\n                    size=\"lg\"\r\n                    fontWeight=\"600\"\r\n                    color=\"coolGray.800\"\r\n                    _dark={{\r\n                      color: \"warmGray.50\",\r\n                    }}\r\n                    // color={useColorModeValue(\"#D9D9D9\", \"#595959\")} // Add text colors\r\n                  >\r\n                    Update employee profile\r\n                  </Heading>\r\n                </Stack>\r\n\r\n                {/* Id Name Phone Department Address: Street City State ZIP Country */}\r\n                <CustomForm\r\n                  label=\"ID\"\r\n                  id=\"id\"\r\n                  placeholder=\"Enter ID here\"\r\n                  isInvalid={\"id\" in errors}\r\n                  value={values.id}\r\n                  onChangeText={handleChange(\"id\")}\r\n                />\r\n                <InputGroup>\r\n                  <CustomForm\r\n                    label=\"First Name\"\r\n                    id=\"firstName\"\r\n                    placeholder=\"e.g. John\"\r\n                    isInvalid={\"firstName\" in errors}\r\n                    value={values.firstName}\r\n                    onChangeText={handleChange(\"firstName\")}\r\n                    w=\"45%\"\r\n                  />\r\n                  <CustomForm\r\n                    label=\"Last Name\"\r\n                    id=\"lastName\"\r\n                    placeholder=\"e.g. Doe\"\r\n                    isInvalid={\"lastName\" in errors}\r\n                    value={values.lastName}\r\n                    onChangeText={handleChange(\"lastName\")}\r\n                    w=\"55%\"\r\n                  />\r\n                </InputGroup>\r\n\r\n                <CustomForm\r\n                  label=\"Phone\"\r\n                  id=\"phone\"\r\n                  placeholder=\"e.g. 000-000-0000\"\r\n                  type=\"number\"\r\n                  isInvalid={\"phone\" in errors}\r\n                  value={values.phone}\r\n                  onChangeText={handleChange(\"phone\")}\r\n                />\r\n                <CustomForm\r\n                  label=\"Department\"\r\n                  id=\"department\"\r\n                  placeholder=\"e.g. department\"\r\n                  isInvalid={\"department\" in errors}\r\n                  value={values.department}\r\n                  onChangeText={handleChange(\"department\")}\r\n                />\r\n                <FormControl\r\n                //Address: Street City State ZIP Country\r\n                >\r\n                  <FormControl.Label htmlFor={\"address\"}>\r\n                    {\"Address\"}\r\n                  </FormControl.Label>\r\n                  <InputGroup>\r\n                    <FormInput\r\n                      id={\"street\"}\r\n                      name={\"Street\"}\r\n                      type={\"text\"}\r\n                      placeholder={\"Street\"}\r\n                      w=\"60%\"\r\n                      isInvalid={\"street\" in errors}\r\n                      value={values.address.street}\r\n                      onChangeText={handleChange(\"address.street\")}\r\n                    />\r\n                    <FormInput\r\n                      id={\"city\"}\r\n                      name={\"City\"}\r\n                      type={\"text\"}\r\n                      placeholder={\"City\"}\r\n                      w=\"40%\"\r\n                      isInvalid={\"city\" in errors}\r\n                      value={values.address.city}\r\n                      onChangeText={handleChange(\"address.city\")}\r\n                    />\r\n                  </InputGroup>\r\n                  <InputGroup>\r\n                    <FormInput\r\n                      id={\"state\"}\r\n                      name={\"State\"}\r\n                      type={\"text\"}\r\n                      placeholder={\"State\"}\r\n                      w=\"40%\"\r\n                      isInvalid={\"state\" in errors}\r\n                      value={values.address.state}\r\n                      onChangeText={handleChange(\"address.state\")}\r\n                    />\r\n                    <FormInput\r\n                      id={\"ZIP\"}\r\n                      name={\"ZIP\"}\r\n                      type={\"text\"}\r\n                      placeholder={\"ZIP\"}\r\n                      w=\"20%\"\r\n                      isInvalid={\"ZIP\" in errors}\r\n                      value={values.address.ZIP}\r\n                      onChangeText={handleChange(\"address.ZIP\")}\r\n                    />\r\n                    <FormInput\r\n                      id={\"country\"}\r\n                      name={\"Country\"}\r\n                      type={\"text\"}\r\n                      placeholder={\"Country\"}\r\n                      w=\"40%\"\r\n                      isInvalid={\"country\" in errors}\r\n                      value={values.address.country}\r\n                      onChangeText={handleChange(\"address.country\")}\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n                {/* {\"name\" in errors ? (\r\n              <FormControl.ErrorMessage>Error</FormControl.ErrorMessage>\r\n            ) : (\r\n              <FormControl.HelperText>\r\n                Name should contain atleast 3 character.\r\n              </FormControl.HelperText>\r\n            )} */}\r\n\r\n                <Button\r\n                  bg=\"ROI.LightOrange\"\r\n                  _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                  _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                  type=\"submit\"\r\n                  onPress={handleSubmit}\r\n                >\r\n                  Save\r\n                </Button>\r\n\r\n                <Button\r\n                  bg=\"ROI.LightOrange\"\r\n                  _hover={{ bg: \"ROI.BurntOrange\" }}\r\n                  _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n                  type=\"submit\"\r\n                  onPress={() => navigation.goBack()}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </VStack>\r\n            </FormControl>\r\n          </VStack>\r\n        )}\r\n      </Formik>\r\n    </Center>\r\n  );\r\n}\r\n","import { Center, Image } from \"native-base\";\r\nimport React from \"react\";\r\nconst img = require(\"./ROI-BAD.png\");\r\nfunction BadIcon(props) {\r\n  return (\r\n    <Center w={[\"3xs\", \"2xs\", \"xs\", \"sm\"]} h=\"40%\">\r\n      <Image\r\n        resizeMode={\"contain\"}\r\n        source={{\r\n          uri: \"https://i.ibb.co/BN0vrkJ/ROI-BAD.png\",\r\n        }}\r\n        // _dark={{source:{uri:\"https://i.ibb.co/XXSp1yp/ROI-GREY.png\"}}}\r\n        // _light={{source:{uri:\"https://i.ibb.co/wdDP7PD/ROI-COLOR.png\"}}}\r\n\r\n        alt=\"ROI logo\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n      />\r\n    </Center>\r\n  );\r\n}\r\n\r\nexport default BadIcon;\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport {\r\n  Button,\r\n  Center,\r\n  Heading,\r\n  HStack,\r\n  useColorModeValue,\r\n  VStack,\r\n} from \"native-base\";\r\nimport React, { useEffect } from \"react\";\r\nimport BadIcon from \"../components/Icon/BadIcon\";\r\n\r\n// import RoiIcon from \"./../components/Icon/Icon\";\r\n\r\nexport default function Home(props) {\r\n  const navigation = useNavigation();\r\n  useEffect(() => {\r\n    // getProfilesAsync();\r\n  }, []);\r\n  return (\r\n    // <Center\r\n    //   bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n    //   px={4}\r\n    //   flex={1}\r\n    //   minW={250}\r\n    //   w=\"100%\"\r\n    //   safeArea\r\n    //   h=\"100%\"\r\n    //   alignItems=\"center\"\r\n    //   justifyContent=\"center\"\r\n    // >\r\n    //   <ScrollView>\r\n    <Center\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n      px={4}\r\n      flex={1}\r\n      minW={250}\r\n      w=\"100%\"\r\n      safeArea\r\n    >\r\n      {/* <Box h={[\"100\", \"110\"]}></Box> */}\r\n      <BadIcon w={\"100%\"} height={\"100%\"} my={1} />\r\n      <VStack space={3} size=\"100%\">\r\n        {/* <RoiIcon /> */}\r\n        <Heading fontSize={[\"2xl\", \"3xl\", \"4xl\"]} fontWeight=\"bold\">\r\n          ROI Staff Manager\r\n        </Heading>\r\n        <HStack space={2} alignItems=\"center\">\r\n          {/* <Text>Click</Text>\r\n          <Box\r\n            _web={{\r\n              _text: {\r\n                fontFamily: \"monospace\",\r\n                fontSize: \"sm\",\r\n              },\r\n            }}\r\n            px={2}\r\n            py={1}\r\n            _dark={{ bg: \"blueGray.800\" }}\r\n            _light={{ bg: \"blueGray.200\" }}\r\n          >\r\n            Staff\r\n          </Box>\r\n          <Text>to see all staff.</Text> */}\r\n        </HStack>\r\n        {/* <Link href=\"https://docs.nativebase.io\" isExternal>\r\n          <Text color=\"primary.500\" underline fontSize={\"xl\"}>\r\n            Learn NativeBase\r\n          </Text>\r\n        </Link> */}\r\n        <Button\r\n          bg=\"ROI.LightOrange\"\r\n          _hover={{ bg: \"ROI.BurntOrange\" }}\r\n          _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n          onPress={() => navigation.navigate(\"Staff\")}\r\n        >\r\n          Staff List\r\n        </Button>\r\n        <Button\r\n          bg=\"ROI.LightOrange\"\r\n          _hover={{ bg: \"ROI.BurntOrange\" }}\r\n          _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n          onPress={() => navigation.navigate(\"Create\")}\r\n        >\r\n          Create new profile\r\n        </Button>\r\n        <Button\r\n          isDisabled\r\n          bg=\"ROI.LightOrange\"\r\n          _hover={{ bg: \"ROI.BurntOrange\" }}\r\n          _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n          onPress={() => navigation.navigate(\"Settings\")}\r\n        >\r\n          Settings\r\n        </Button>\r\n\r\n        {/* <Button\r\n          isLoading\r\n          isLoadingText=\"Loading staff\"\r\n          variant=\"outline\"\r\n        ></Button> */}\r\n      </VStack>\r\n    </Center>\r\n    //   </ScrollView>\r\n    // </Center>\r\n  );\r\n}\r\n","import { extendTheme } from \"native-base\";\r\nimport { Appearance } from \"react-native\";\r\nconst colorScheme = Appearance.getColorScheme();\r\nexport const theme = extendTheme({\r\n  colors: {\r\n    // Add new color\r\n    ROI: {\r\n      Red: \"#941a1d\",\r\n      RealRed: \"#7e211f\",\r\n      Charcoal: \"#262626\",\r\n      Grey: \"#595959\",\r\n      White: \"#ffffff\",\r\n      BurntOrange: \"#c64c38\",\r\n      LightOrange: \"#cb6d4f\",\r\n      MidGrey: \"#3b3b3b\",\r\n      LightGrey: \"#D9D9D9\",\r\n    },\r\n  },\r\n  config: {\r\n    // Changing initialColorMode to 'dark'\r\n    initialColorMode: String(colorScheme),\r\n    strictMode: \"error\",\r\n  },\r\n});\r\n\r\nexport function getColor(mode) {\r\n  switch (mode) {\r\n    case \"bg_dark\":\r\n      return \"#595959\";\r\n    case \"bg_light\":\r\n      return \"#D9D9D9\";\r\n    case \"title_dark\":\r\n      return \"#262626\";\r\n    case \"title_light\":\r\n      return \"#941a1d\";\r\n    case \"title_btn\":\r\n      return \"#\";\r\n    case \"title_btn_click\":\r\n      return \"#\";\r\n    case \"btn\":\r\n      return \"#c64c38\";\r\n    case \"btn_click\":\r\n      return \"#cb6d4f\";\r\n    default:\r\n      break;\r\n  }\r\n}\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport { Center } from \"native-base\";\r\nimport React from \"react\";\r\nimport { getColor } from \"../theme\";\r\n// import RoiIcon from \"./../components/Icon/Icon\";\r\n\r\nexport default function Settings(props) {\r\n  const navigation = useNavigation();\r\n\r\n  return (\r\n    <Center\r\n      _dark={{ bg: getColor(\"bg_dark\") }}\r\n      _light={{ bg: getColor(\"bg_light\") }}\r\n      px={4}\r\n      flex={1}\r\n      minW={250}\r\n      w=\"100%\"\r\n      safeArea\r\n    ></Center>\r\n  );\r\n}\r\n","import { Ionicons } from \"@expo/vector-icons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport {\r\n  AlertDialog,\r\n  Avatar as NativeAvatar,\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HStack,\r\n  Icon,\r\n  IconButton,\r\n  Pressable,\r\n  Spacer,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"native-base\";\r\nimport React from \"react\";\r\n// import { PersonasAvatar } from \"react-native-personas-avatar\";\r\nimport Avatar, { genConfig } from \"react-nice-avatar\";\r\nimport { deleteProfilesAsyncById } from \"./../users.service\";\r\n\r\nfunction ProfileButton({ icon, onPress }) {\r\n  return (\r\n    <IconButton\r\n      icon={icon}\r\n      _hover={{\r\n        bg: useColorModeValue(\"ROI.MidGrey\", \"ROI.MidGrey\"),\r\n      }}\r\n      _pressed={{\r\n        bg: useColorModeValue(\"ROI.MidGrey\", \"ROI.MidGrey\"),\r\n      }}\r\n      onPress={onPress}\r\n    />\r\n  );\r\n}\r\n\r\nexport default function Profile({ profile }) {\r\n  const navigation = useNavigation();\r\n  const config = genConfig();\r\n\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  const onClose = () => setIsOpen(false);\r\n  const onDelete = () => {\r\n    setIsOpen(false);\r\n    deleteProfilesAsyncById(profile.id);\r\n    navigation.navigate(\"Staff\", { op: \"delete\", id: profile.id });\r\n  };\r\n\r\n  const cancelRef = React.useRef(null);\r\n  // console.count();\r\n  // return (\r\n  //   <Box>\r\n  //     <Avatar style={{ width: \"8rem\", height: \"8rem\" }} {...config} />\r\n\r\n  //   </Box>\r\n  // )\r\n  console.log(\"SOOSOSOOSOSOSOSOOSOSOSOSOSO\");\r\n  console.log(profile);\r\n  return (\r\n    <Box w=\"100%\" borderColor=\"black\" borderWidth=\"1px\" borderRadius={10}>\r\n      <Pressable\r\n        _light={{\r\n          _hover: { bg: \"ROI.BurntOrange\" },\r\n          _pressed: { bg: \"ROI.BurntOrange\" },\r\n        }}\r\n        _dark={{\r\n          _hover: { bg: \"ROI.BurntOrange\" },\r\n          _pressed: { bg: \"ROI.BurntOrange\" },\r\n        }}\r\n        borderRadius={10}\r\n        onPress={() => navigation.navigate(\"Details\", profile)}\r\n        // _dark={{\r\n        //   bg: \"coolGray.800\",\r\n        // }}\r\n        // _light={{\r\n        //   bg: \"white\",\r\n        // }}\r\n      >\r\n        <Box w=\"100%\" p={1}>\r\n          <HStack w=\"100%\" alignItems=\"center\">\r\n            <NativeAvatar\r\n              bg=\"lightBlue.400\"\r\n              source={{\r\n                uri: profile.uri ?? \"\",\r\n              }}\r\n              minW={3}\r\n              mr={3}\r\n            >\r\n              <Avatar style={{ width: \"3rem\", height: \"3rem\" }} {...config} />\r\n            </NativeAvatar>\r\n            <Box maxW=\"40%\" m={0}>\r\n              <Text\r\n                color=\"coolGray.800\"\r\n                _dark={{\r\n                  color: \"warmGray.50\",\r\n                }}\r\n                bold\r\n              >\r\n                {profile.firstName + \" \" + profile.lastName}\r\n              </Text>\r\n            </Box>\r\n            <Spacer />\r\n            <Flex\r\n              wrap=\"wrap\"\r\n              justifySelf=\"flex-end\"\r\n              direction={[\"column\", \"row\"]}\r\n              ml={0}\r\n            >\r\n              <ProfileButton\r\n                icon={\r\n                  <Icon\r\n                    color={useColorModeValue(\"black\", \"ROI.White\")}\r\n                    // color={props.index === props.state.index ? \"primary.500\" : \"gray.500\"}\r\n                    size=\"5\"\r\n                    as={<Ionicons name={\"create\"} />}\r\n                  />\r\n                }\r\n                onPress={() => navigation.navigate(\"Edit\", profile)}\r\n              />\r\n              <ProfileButton\r\n                icon={\r\n                  <Icon\r\n                    color={useColorModeValue(\"black\", \"ROI.White\")}\r\n                    // color={props.index === props.state.index ? \"primary.500\" : \"gray.500\"}\r\n                    size=\"5\"\r\n                    as={<Ionicons name={\"trash\"} />}\r\n                  />\r\n                }\r\n                onPress={() => setIsOpen(!isOpen)}\r\n              />\r\n            </Flex>\r\n          </HStack>\r\n        </Box>\r\n      </Pressable>\r\n      <AlertDialog\r\n        leastDestructiveRef={cancelRef}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialog.Content>\r\n          <AlertDialog.CloseButton />\r\n          <AlertDialog.Header>Delete Customer</AlertDialog.Header>\r\n          <AlertDialog.Body>\r\n            {`Are you sure you want to delete ${profile.firstName} ${profile.lastName}?`}\r\n          </AlertDialog.Body>\r\n          <AlertDialog.Footer>\r\n            <Button.Group space={2}>\r\n              <Button\r\n                variant=\"unstyled\"\r\n                colorScheme=\"coolGray\"\r\n                onPress={onClose}\r\n                ref={cancelRef}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button colorScheme=\"danger\" onPress={onDelete}>\r\n                Delete\r\n              </Button>\r\n            </Button.Group>\r\n          </AlertDialog.Footer>\r\n        </AlertDialog.Content>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n}\r\n","// import { useNavigation, useTheme } from \"@react-navigation/native\";\r\n// import { Center, Heading, ScrollView, VStack } from \"native-base\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport {\r\n  Button,\r\n  Center,\r\n  FlatList,\r\n  Heading,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Profile from \"./../components/Profile\";\r\nimport { getProfilesAsync } from \"./../users.service\";\r\n\r\nexport default function Staff() {\r\n  // Navigation\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n\r\n  // State\r\n  const [profiles, setProfiles] = useState([]);\r\n  // getProfilesAsync().then((json) => setProfiles(json));\r\n  // Effect\r\n\r\n  useEffect(() => {\r\n    switch (route.params?.op) {\r\n      case undefined:\r\n        // get profiles\r\n        getProfilesAsync().then((json) => setProfiles(json));\r\n        break;\r\n      case \"create\":\r\n        // setProfiles to current profiles\r\n        console.log(\"loading with \", route.params.data);\r\n        setProfiles([...profiles, route.params.data]);\r\n        break;\r\n      case \"update\":\r\n        // setProfiles to current profiles\r\n        setProfiles(\r\n          profiles.map((u) =>\r\n            u.id == route.params.data.id ? route.params.data : u\r\n          )\r\n        );\r\n        break;\r\n      case \"delete\":\r\n        // setProfiles to current profiles\r\n        setProfiles(profiles.filter((u) => u.id !== route.params.id));\r\n        break;\r\n    }\r\n  }, [route.params]);\r\n\r\n  console.log(profiles);\r\n  return (\r\n    <Center\r\n      bg={useColorModeValue(\"#D9D9D9\", \"#595959\")}\r\n      px={4}\r\n      flex={1}\r\n      minW={250}\r\n      w=\"100%\"\r\n      safeArea\r\n    >\r\n      <Heading my={6} textAlign=\"center\" size=\"lg\">\r\n        Staff list\r\n      </Heading>\r\n      {!profiles.length ? (\r\n        <Text>No profiles found</Text>\r\n      ) : (\r\n        <FlatList\r\n          w=\"70%\"\r\n          data={profiles}\r\n          keyExtractor={(item) => item.id}\r\n          renderItem={({ item }) => <Profile profile={item} />}\r\n        />\r\n      )}\r\n      <Button.Group w=\"70%\" my={2}>\r\n        <Button\r\n          w=\"50%\"\r\n          onPress={() => navigation.navigate(\"Create\")}\r\n          bg=\"ROI.LightOrange\"\r\n          _hover={{ bg: \"ROI.BurntOrange\" }}\r\n          _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n        >\r\n          Create Profile\r\n        </Button>\r\n        <Button\r\n          w=\"50%\"\r\n          onPress={() => navigation.navigate(\"Home\")}\r\n          bg=\"ROI.LightOrange\"\r\n          _hover={{ bg: \"ROI.BurntOrange\" }}\r\n          _pressed={{ bg: \"ROI.BurntOrange\" }}\r\n        >\r\n          Home\r\n        </Button>\r\n      </Button.Group>\r\n    </Center>\r\n  );\r\n}\r\n{\r\n  /* \r\nfunction Basic() {\r\n  const [listData, setListData] = useState(\r\n    Array(20)\r\n      .fill(\"\")\r\n      .map((_, i) => ({\r\n        key: `${i}`,\r\n        text: `item #${i}`,\r\n      }))\r\n  );\r\n\r\n  const closeRow = (rowMap, rowKey) => {\r\n    if (rowMap[rowKey]) {\r\n      rowMap[rowKey].closeRow();\r\n    }\r\n  };\r\n\r\n  const deleteRow = (rowMap, rowKey) => {\r\n    closeRow(rowMap, rowKey);\r\n    const newData = [...listData];\r\n    const prevIndex = listData.findIndex((item) => item.key === rowKey);\r\n    newData.splice(prevIndex, 1);\r\n    setListData(newData);\r\n  };\r\n\r\n  const onRowDidOpen = (rowKey) => {\r\n    console.log(\"This row opened\", rowKey);\r\n  };\r\n\r\n  const renderItem = ({ item, index }) => (\r\n    <Box>\r\n      <Pressable\r\n        onPress={() => console.log(\"You touched me\")}\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        borderBottomColor=\"trueGray.200\"\r\n        borderBottomWidth={1}\r\n        justifyContent=\"center\"\r\n        height={50}\r\n        underlayColor={\"#AAA\"}\r\n        _pressed={{\r\n          bg: \"trueGray.200\",\r\n        }}\r\n        py={8}\r\n      >\r\n        <HStack width=\"100%\" px={4}>\r\n          <HStack space={2} alignItems=\"center\">\r\n            <Avatar color=\"white\" bg={\"secondary.700\"}>\r\n              {index}\r\n            </Avatar>\r\n            <Text>{item.text}</Text>\r\n          </HStack>\r\n        </HStack>\r\n      </Pressable>\r\n    </Box>\r\n  );\r\n\r\n  const renderHiddenItem = (data, rowMap) => (\r\n    <HStack flex={1} pl={2}>\r\n      <Pressable\r\n        px={4}\r\n        ml=\"auto\"\r\n        cursor=\"pointer\"\r\n        bg=\"dark.500\"\r\n        justifyContent=\"center\"\r\n        onPress={() => closeRow(rowMap, data.item.key)}\r\n        _pressed={{\r\n          opacity: 0.5,\r\n        }}\r\n      >\r\n        <Icon as={<Ionicons name=\"close\" />} color=\"white\" />\r\n      </Pressable>\r\n      <Pressable\r\n        px={4}\r\n        cursor=\"pointer\"\r\n        bg=\"red.500\"\r\n        justifyContent=\"center\"\r\n        onPress={() => deleteRow(rowMap, data.item.key)}\r\n        _pressed={{\r\n          opacity: 0.5,\r\n        }}\r\n      >\r\n        <Icon as={<MaterialIcons name=\"delete\" />} color=\"white\" />\r\n      </Pressable>\r\n    </HStack>\r\n  );\r\n\r\n  return (\r\n    <Box bg=\"white\" safeArea flex={1}>\r\n      <SwipeListView\r\n        data={listData}\r\n        renderItem={renderItem}\r\n        renderHiddenItem={renderHiddenItem}\r\n        rightOpenValue={-130}\r\n        previewRowKey={\"0\"}\r\n        previewOpenValue={-40}\r\n        previewOpenDelay={3000}\r\n        onRowDidOpen={onRowDidOpen}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Staff; */\r\n}\r\n","import { createDrawerNavigator } from \"@react-navigation/drawer\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { useColorMode, useColorModeValue } from \"native-base\";\r\nimport * as React from \"react\";\r\nimport { Dimensions } from \"react-native\";\r\nimport AppBar from \"../components/AppBar\";\r\nimport MyDrawer from \"../components/MyDrawer\";\r\nimport Create from \"../screens/Create\";\r\nimport Details from \"../screens/Details\";\r\nimport Edit from \"../screens/Edit\";\r\nimport Home from \"./../screens/Home\";\r\nimport Settings from \"./../screens/Settings\";\r\nimport Staff from \"./../screens/Staff\";\r\nconst Stack = createNativeStackNavigator();\r\nconst Drawer = createDrawerNavigator();\r\nconst width = Dimensions.get(\"screen\").width;\r\n\r\nexport default function ScreenNavigator() {\r\n  const navigation = useNavigation();\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Drawer.Navigator\r\n      backBehavior=\"history\"\r\n      drawerContent={(props) => <MyDrawer {...props} />}\r\n      screenOptions={{\r\n        drawerStyle: {\r\n          backgroundColor: useColorModeValue(\"#D9D9D9\", \"#595959\"),\r\n          // _dark: { bg: \"#3b3b3b\" },\r\n          // _light: { bg: \"#D9D9D9\" },\r\n          // width: \"50%\",\r\n          maxWidth: \"200px\",\r\n\r\n          // width: width - width / 4,\r\n          // drawerWidth: Dimensions.get(\"window\").width,\r\n        },\r\n        header: (props) => (\r\n          <AppBar colorModeToggle={toggleColorMode} {...props} />\r\n        ),\r\n      }}\r\n      defaultStatus=\"closed\"\r\n    >\r\n      <Drawer.Screen name=\"Home\" component={Home} />\r\n      <Drawer.Screen name=\"Staff\" component={Staff} />\r\n      <Drawer.Screen name=\"Details\" component={Details} />\r\n      <Drawer.Screen name=\"Edit\" component={Edit} />\r\n      <Drawer.Screen name=\"Create\" component={Create} />\r\n      <Drawer.Screen name=\"Settings\" component={Settings} />\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n","import { NavigationContainer } from \"@react-navigation/native\";\nimport { NativeBaseProvider } from \"native-base\";\nimport React, { useEffect } from \"react\";\nimport ScreenNavigator from \"./src/Navigation/Navigator\";\nimport { theme } from \"./src/theme\";\nimport { getProfilesAsync } from \"./src/users.service\";\n\nexport default function App() {\n  return (\n    <>\n      <NavigationContainer>\n        <NativeBaseProvider theme={theme} bg=\"red\">\n          <ScreenNavigator />\n        </NativeBaseProvider>\n      </NavigationContainer>\n    </>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/ROI-BAD.087ba7db.png\";"],"sourceRoot":""}